/**
 * Copyright (c) 2019 Atos
 * This program and the accompanying materials
 * are made available under the terms of the Apache License v2.0
 * which accompanies this distribution, and is available at
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Contributors:
 *    @author Fernando Mendez Requena - fernando.mendez@atos.net
 * 
 * OpenAPI spec version: 1.0.0
 * 
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * 
 * Developed in the context of ElasTest EU project http://elastest.io 
 */

package io.elastest.eim.test.e2e;

import java.util.Collections;


import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class EimApiRestTest {

	private String sut_address = System.getenv("ET_SUT_HOST");
	private String server = "http://nightly.elastest.io:37004/eim/api/agent/";
	private String user = "root";
	
	// public RestClient client = new RestClient(server, user, password,
	// secureElastest);

	public RestTemplate restTemplate = new RestTemplate();
	public HttpHeaders headers = new HttpHeaders();

	// TODO - registerAgent_then200OK()
	@Test
	public void registerAgentTest() {
		
		String privateKey = "\"-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAu3j8Zep/0/XHa2Bld1LntS0HtQolkd8Rqcwd41ZTaMjdlORh\nu7ppMNhAUAbG+lzNEdBP+WSIE/WX71FA0kSs3UnCJomDDnHQWjkvFvoVyRpBxQ6P\ndkiRfRi9Q10oMZmkfjP0V/+FU3ICEOiXJtwhmzLF0tHHYfrhLNU59s1L7I1E15Zt\nTVB1HE3V1gPymJO19AhDJMz5CRXvJR0QLcSo1Ej7FgAE3eePPOjOxZQ3pc9FEnGl\nHTM2zRAOIbqdXWkdtnevmP7PgNOg//rdnT1+WMOTSIZgIXX6DiwrBJSzG541F5JM\n1nlgzHDzUeB9iY4w8EE+h8aM3mBInKkfNVZ43QIDAQABAoIBACX8/igovH5W73Hy\ntpzXT9yGo2ksBTDp4splcij+9Sfmi///x04jF+2t5FpTBT72Txes/oeqt2hT+9Wi\nwV/aSq0MpSrp8oSay3182O3u/zsg9vLXYHq3ecO/n5pm5h4m5A4uuPSb8ohWMdT7\nTKWzNZwdTbjKiXxxOe+7xWMddqUYIbWXVo2i9TpB9gX4U46kgSdvnz3uoRO0amGB\nZ7jW5oLzfux2nm5V2Yt0PeKobAzn4mh4Bi9g1uXNHjKgys6+7MgRWQBEp0LyCXSC\nQ4B6dZ2eGQWj+H7HUt/SDSa+GC/q+aKMCViRKe6wEZYIzOb+eDCX0rySJoLkp44T\nACoHKIECgYEA+SyoJPbR87MOerkG/NXA/Q6T8DvX+nxuybz0O1ElLAvUiag+WoBw\npVHPHpeMp7/N79YHqhWTu87UMZOfxaR3BOfZNbUc7MgETp5O4zA5AL5RvJxI+MBt\nnhZTRbT6BQ12WhWVQChd/krDhGCY4lJ1GudGReGtUDLtn3LzT2Ku3l8CgYEAwJuk\npCe8wQCMxHHW1siHKO+eJGI2ZsFKCTmq0AmuTgUF/NdxQ0CymRVl/+5e364aVE3L\nKcTdqb88Zr0Bmbx1k23OkjmsErDrdWqy6vOIsPS+grTvGPvesFdd45lpWeQl0hxn\nidDB5A00haYhTc1k+fxVlix7Qm7Hlku+LGkHekMCgYAN+uhwMnzzHF+6mPkAZInQ\naOn595GVlzesD/LwBQx93SgOlSbycvRfAikJwVz96HAIfcyuSUmhpugW4/5521Fm\nMA/qyH+X9VzwgEdSzdjU5ti1KVuawUklLoF7jrzcXbX/NejK0bj8VHuFyNmrEQ9K\n9CDoONI9hq34XT2zfYjsJwKBgDn536ol5/Q0hSrQlXmbbMvOrMyI35U4k1+JgzgR\n4ezMKEw+UXKL8/aOcWCDUP2Fe5lqvT+6aXqh/L10IRo0lzOkduye/YO2y3lRf7+n\nRLr3QK05Z0se7Z4o/jL3R7XuLdA8CpJ6SxKpQukD47x2mfGBmgWVKBkMHXnJHNpj\nVwPfAoGBANtqpHU8lWUI2Ex0IR0SlRKK8XC7OGvRVnpkX3cBfuGNN8iJaPFz/17+\nLfPVxdtNS2l+cq2vLJCma4GvrXZCuV4Gm0H1Gp5FIheFsns82cxARatHnf5rTjEh\ncAGCP+fTE6+8yR1zok7nRKpo3172KMw1vRfutPws/y68mBq7EBxO\n-----END RSA PRIVATE KEY-----\"";

		System.out.println("SUT Address: "+sut_address);
		
		// Remove "\" last character
		String privateKey_modified = privateKey.substring(0, privateKey.length() - 1);		
		
		String payload = "{\"address\":\""+sut_address+"\",\"user\":\""+user+"\",\"private_key\":\""+privateKey_modified+"\",\"logstash_ip\":\"172.20.0.4\",\"logstash_port\":\"5044\",\"password\":\"elastest\"}";
		
		JsonObject jsonObject = new JsonParser().parse(payload).getAsJsonObject();
		
		String URL = server;
		System.out.println("############ Endpoint request ############ ");
		System.out.println(URL);
		System.out.println("############ Json: ############");
		System.out.println(jsonObject);
		System.out.println("############ Json to String: ############" );
		System.out.println(jsonObject.toString());

		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

		HttpEntity<String> request = new HttpEntity<String>(jsonObject.toString(), headers);
		System.out.println("############ This is the request: ############");
		System.out.println(request.toString());
		
		ResponseEntity<String> response = restTemplate.exchange(URL,  HttpMethod.POST, request, String.class);
		
		System.out.println("############ Response for Test1: ############");
		System.out.println(response);

		Assertions.assertEquals(200, response.getStatusCodeValue());
		
		
	}

	/*
	 * // TODO - request_packetloss_action_then200OK
	 *//**
		 * curl -i -X POST -H "Content-Type:application/json" -H
		 * "Accept:application/json"
		 * http://localhost:8080/eim/api/agent/controllability/iagent0/packetloss -d '{
		 * "exec": "EXECBEAT", "component": "EIM", "packetLoss": "0.01", "stressNg": "",
		 * "dockerized": "yes", "cronExpression": "@every 60s" }'
		 */
	/*
	 * 
	 * @Test public void requestActionPacketLossTest() { String
	 * uri_packetloss_action = "controllability/iagent0/packetloss"; // String
	 * payload = //
	 * "{\"exec\":\"EXECBEAT\",\"component\":\"EIM\",\"packetLoss\":\"0.01\",\"stressNg\":\"\",\"dockerized\":\"yes\",\"cronExpression\":\"
	 * @every // 60s\"}";
	 * 
	 * Map<String, String> body = new HashMap<>(); body.put("exec", "EXECBEAT");
	 * body.put("component", "EIM"); body.put("packetLoss", "0.01");
	 * body.put("stressNg", ""); body.put("dockerized", "yes");
	 * body.put("cronExpression", "@every 60s");
	 * 
	 * String URL = server + uri_packetloss_action;
	 * 
	 * System.out.println("Endpoint request " + server + uri_packetloss_action);
	 * System.out.println("Payload:" + body);
	 * 
	 * headers.setContentType(MediaType.APPLICATION_JSON);
	 * headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
	 * 
	 * HttpEntity<Map<String, String>> request = new HttpEntity<Map<String,
	 * String>>(body, headers);
	 * 
	 * Assertions.assertEquals(200, restTemplate.exchange(URL, HttpMethod.POST,
	 * request, Map.class).getStatusCodeValue());
	 * 
	 * }
	 * 
	 * // TODO - request_stress_action_then200OK()
	 * 
	 *//**
		 * curl -i -X POST -H "Content-Type:application/json" -H
		 * "Accept:application/json"
		 * http://localhost:8080/eim/api/agent/controllability/iagent0/stress -d '{
		 * "exec": "EXECBEAT", "component": "EIM", "packetLoss": "", "stressNg": "4",
		 * "dockerized": "yes", "cronExpression": "@every 60s" }'
		 **/
	/*
	 * 
	 * @Test public void requestActionStressTest() { String uri_stress_action =
	 * "controllability/iagent0/stress"; // String payload = //
	 * "{\"exec\":\"EXECBEAT\",\"component\":\"EIM\",\"packetLoss\":\"\",\"stressNg\":\"4\",\"dockerized\":\"yes\",\"cronExpression\":\"
	 * @every // 60s\"}"; Map<String, String> body = new HashMap<>();
	 * body.put("exec", "EXECBEAT"); body.put("component", "EIM");
	 * body.put("packetLoss", ""); body.put("stressNg", "4"); body.put("dockerized",
	 * "yes"); body.put("cronExpression", "@every 60s");
	 * 
	 * String URL = server + uri_stress_action;
	 * 
	 * System.out.println("Endpoint request: " + URL);
	 * System.out.println("Payload: " + body);
	 * 
	 * headers.setContentType(MediaType.APPLICATION_JSON);
	 * headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
	 * 
	 * HttpEntity<Map<String, String>> request = new HttpEntity<Map<String,
	 * String>>(body, headers); Assertions.assertEquals(200,
	 * restTemplate.exchange(URL, HttpMethod.POST, request,
	 * Map.class).getStatusCodeValue()); }
	 * 
	 * // TODO - Unistall Agent - request_unistall_agent
	 * 
	 *//**
		 * curl -i -X DELETE -H "Content-Type:application/json" -H
		 * "Accept:application/json"
		 * http://localhost:8080/eim/api/agent/iagent0/unmonitor
		 * 
		 * @throws InterruptedException
		 */
	/*
	 * 
	 * @Test public void requestUnistallAgentTest() throws InterruptedException {
	 * String uri_unistall_agent = "iagent0/unmonitor"; TimeUnit.SECONDS.sleep(160);
	 * 
	 * headers.setContentType(MediaType.APPLICATION_JSON);
	 * headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
	 * 
	 * Map<String, String> body = new HashMap<>(); String URL = server +
	 * uri_unistall_agent;
	 * 
	 * System.out.println("Endpoint request: " + URL);
	 * 
	 * HttpEntity<Map<String, String>> request = new HttpEntity<Map<String,
	 * String>>(body, headers);
	 * 
	 * Assertions.assertEquals(200, restTemplate.exchange(URL, HttpMethod.DELETE,
	 * request, Map.class).getStatusCodeValue());
	 * 
	 * }
	 * 
	 * // TODO - Remove Agent
	 * 
	 *//**
		 * curl -i -X DELETE -H "Content-Type:application/json" -H
		 * "Accept:application/json" http://localhost:8080/eim/api/agent/iagent0
		 * 
		 * @throws InterruptedException
		 *//*
			 * 
			 * @Test public void requestDeleteAgentTest() throws InterruptedException {
			 * String uri_delete_agent = "iagent0"; TimeUnit.SECONDS.sleep(160);
			 * 
			 * Map<String, String> body = new HashMap<>(); String URL = server +
			 * uri_delete_agent;
			 * 
			 * System.out.println("Endpoint request: " + URL);
			 * 
			 * HttpEntity<Map<String, String>> request = new HttpEntity<Map<String,
			 * String>>(body, headers); Assertions.assertEquals(200,
			 * restTemplate.exchange(URL, HttpMethod.DELETE, request,
			 * Map.class).getStatusCodeValue());
			 * 
			 * }
			 */

}
