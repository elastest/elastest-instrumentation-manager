/**
 * Copyright (c) 2019 Atos
 * This program and the accompanying materials
 * are made available under the terms of the Apache License v2.0
 * which accompanies this distribution, and is available at
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Contributors:
 *    @author Fernando Mendez Requena - fernando.mendez@atos.net
 * 
 * OpenAPI spec version: 1.0.0
 * 
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * 
 * Developed in the context of ElasTest EU project http://elastest.io 
 */

package io.elastest.eim.test.e2e;

import java.util.Collections;
import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.google.gson.JsonObject;

public class EimApiRestTest {

	private String sut_address = System.getenv("ET_SUT_HOST");
	private String server = "http://nightly.elastest.io:37004/eim/api/agent/";
	
	public RestTemplate restTemplate = new RestTemplate();
	public HttpHeaders headers = new HttpHeaders();

	// TODO - registerAgent_then200OK()
	@Test
	public void registerAgentTest() {
		
		String privateKey = "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEA36r0UFyRg6n9tiyx6mkFAZMhuRoSw/CXLC0XQj1B7EOpkxwv\nnY8JPnk1j4y6qiYhNUd06Rnniyv16ZmZ809EO1f+gQNKzLmQN08i4sUrE3eWUvJl\nNEpYr+jy/XqnQSyDGqlcXlnD3Lo8oTvH4p0DpMVSzIGcf+xXYiYhEeLJBX6D1uCT\nVYo3DSVcKGRDcHP17aEdQARuacqRAxaIl42kwDo+vUQRUxumk6e7HzAVFJA1t63i\nAcKbzpxoqvttLOELg7Bq29XeG7696fhllcQYMG0FHdHiEiQ3BqrdP/6EaC+iytg+\nBBq7Uwuxtsg97RZgWZC05ORwGxILb+BVP9l2uQIDAQABAoIBABjRd1qTavIZIrXc\nL8G69Xs/QDax1fM39w5H0pTfBzmYKHDSZ9Yr0PLFsFPFYdEPeg/XZfmXjkG7FwZc\nrOB6oy+SjAL0wpAE5yO7/Dr9ddIrKtr5WpF6zmx2hL/rpDNvJP0IXd96RmlvoNqj\nL4LNuWHHI3Dd0OfA6dFSOckqSPP66KXTG088N+VvL7wNCkO08qXS9w2YERPwdHdC\nkg0oZyAjwK0ISsk6O2sP/+PfMxFjx1iZxVh1jNLvMciwIhzmu2bN9pJ5YlNtfys4\nXG1ZK1MfcOFbs8RJdfKNu3BS7Ftnjnsoy5smnyMCnU2BWwNuqOlcv8Y5MhU2CG1K\nCGLV7KECgYEA/TbDjopcBWwGiYCqehYqL6MrVcqAHobdgYOBRCRKHET8fpklrYhv\nSlVFY2EwgrnpxOoGBAZmIhiiLRHcP5yhqHd0IhJdS5fxrQ0O+xQnkcx/L1QoMFX2\nyjEvTFnevxNNhiF8qMGgCN/idnPJfp4SJvDEnEDgbsSBvhqbYa2b7HsCgYEA4iD3\nhbJp7fr9+Ne3T6m8LGyfAbyEo/PFDhmq6BX1XxAfBj0mSCN9umcZlCfsLTqVzHW/\nmJ9y0dfpu3Yh5UoXqqsGlfAOOsJUJ+5jp7NDOaLqmKV0ASeTS736Xo5QU+TwaJsF\nKqpSV/1g+5wJblAViEO0ZkPyQHqbpn4E0nMKBVsCgYA5pGjaHwcZuOC4FpE4X6lU\n1Nk9m26VBHCSViRsJbK1QsMT8rsQCPoEuuqj1/EaIUZlLD0YV3iSlHb+uY0g8gAf\nAKpwQyv31GwQz+M0Jv9nAl2FoavQbRFUL+Qrhl3ds4A3Y5IkPIe43XaJLoyVBVju\ngmrPgzlUHenHI/lxP/s51wKBgE+StkeP7wLVrgWhM1qPKi6f0pxz0GE5aQB7O88L\n2xqmu6QgZJZCFv4/RZsDKXMJCKm4TcHRakA5sIBNI8Rh/E4MfPbKUNeQhri+hMcA\nqAliMReiMV4upQCkS7R2dAHxsD+/PWQ0J2HbQgOIdzEgcVNQL+1Ev7y86IUAF4ZP\nARm9AoGBAPK2kO8MLAYxemsk5vm11aJgYYNWqV8YOkObPn37CT0AWgYCEwlrFqti\nPHcNjRSX20g6ohb3owzSgsC3Aqzut3fdtjgT8J621jGBUvAqMoCzirkRSdL3fIpJ\n1FNU01UkF5/8a4PCVr+QT6YbtqNGGXVG5ce0GuWyRlJj824JW4jP\n-----END RSA PRIVATE KEY-----";
		
		System.out.println("SUT Address: "+sut_address);
		System.out.println("Private key: "+privateKey);
		
		JsonObject obj = new JsonObject();
		obj.addProperty("address", new String(sut_address));
		obj.addProperty("user", "root");
		obj.addProperty("private_key", new String(privateKey));
		obj.addProperty("logstash_ip", "172.20.0.4");
		obj.addProperty("logstash_port", "5044");
		obj.addProperty("password", "elastest");
		
		System.out.println("Payload: "+obj.toString());
		
		String URL = server;
		
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
		

		HttpEntity<String> request = new HttpEntity<String>(
				obj.toString(), headers);
		
		ResponseEntity<String> response = restTemplate.exchange(URL,  HttpMethod.POST, request, String.class);
		
		System.out.println("############ Response for Test1: ############");
		System.out.println(response);

		Assertions.assertEquals(200, response.getStatusCode().value());
		
		
	}

	 @Test
	 public void requestActionPacketLossTest() {
		 
		String uri_packetloss_action = "controllability/iagent0/packetloss";
		String URL = server + uri_packetloss_action;
		 
		JsonObject obj = new JsonObject();
		obj.addProperty("exec", "EXECBEAT");
		obj.addProperty("component", "EIM");
		obj.addProperty("packetLoss", "0.01");
		obj.addProperty("stressNg", "");
		obj.addProperty("dockerized", "yes");
		obj.addProperty("cronExpression", "@every 60s");
		
		System.out.println("Payload: "+obj.toString());
		
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
		

		HttpEntity<String> request = new HttpEntity<String>(
				obj.toString(), headers);
		
		ResponseEntity<String> response = restTemplate.exchange(URL,  HttpMethod.POST, request, String.class);
		System.out.println("############ Response for Test2: ############");
		System.out.println(response);

		
		Assertions.assertEquals(200, response.getStatusCode().value());
	  
	 }
	 
	 @Test
	 public void requestActionStressTest() {
		 
		String uri_packetloss_action = "controllability/iagent0/packetloss";
		String URL = server + uri_packetloss_action;
		 
		JsonObject obj = new JsonObject();
		obj.addProperty("exec", "EXECBEAT");
		obj.addProperty("component", "EIM");
		obj.addProperty("packetLoss", "");
		obj.addProperty("stressNg", "4");
		obj.addProperty("dockerized", "yes");
		obj.addProperty("cronExpression", "@every 60s");
		
		System.out.println("Payload: "+obj.toString());
		
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
		

		HttpEntity<String> request = new HttpEntity<String>(
				obj.toString(), headers);
		
		ResponseEntity<String> response = restTemplate.exchange(URL,  HttpMethod.POST, request, String.class);
		System.out.println("############ Response for Test3: ############");
		System.out.println(response);

		
		Assertions.assertEquals(200, response.getStatusCode().value());
	  
	 }
	
	 @Test
	 public void requestUnistallAgentTest() throws InterruptedException {
		String uri_unistall_agent = "iagent0/unmonitor"; 
		TimeUnit.SECONDS.sleep(160);
		 
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
		 
		String URL = server +  uri_unistall_agent;
		 
		HttpEntity<String> request = new HttpEntity<String>("", headers);
		ResponseEntity<String> response = restTemplate.exchange(URL,  HttpMethod.DELETE, request, String.class);
		
		System.out.println("############ Response for Test4: ############");
		System.out.println(response);
		
		
		Assertions.assertEquals(200, response.getStatusCode().value());
 
	 }
	 
	 @Test
	 public void requestDeleteAgentTest() throws InterruptedException {
		 String uri_unistall_agent = "iagent0/unmonitor"; 
		 TimeUnit.SECONDS.sleep(160);
		 
		 headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
		 
		 String URL = server +  uri_unistall_agent;
		 
		 HttpEntity<String> request = new HttpEntity<String>("", headers);
		 ResponseEntity<String> response = restTemplate.exchange(URL,  HttpMethod.DELETE, request, String.class);
		 
		 System.out.println("############ Response for Test5: ############");
		 System.out.println(response);
		 
	 }

}
