/**
 * Copyright (c) 2019 Atos
 * This program and the accompanying materials
 * are made available under the terms of the Apache License v2.0
 * which accompanies this distribution, and is available at
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Contributors:
 *    @author Fernando Mendez Requena - fernando.mendez@atos.net
 * 
 * OpenAPI spec version: 1.0.0
 * 
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * 
 * Developed in the context of ElasTest EU project http://elastest.io 
 */

package io.elastest.eim.test.e2e;

import java.io.IOException;
import java.util.Collections;
import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;


public class EimApiRestTest {

	private String sut_address = System.getenv("ET_SUT_HOST");
	private String logstash_ip = System.getenv("ET_MON_LSBEATS_HOST");
	private String logstash_port = System.getenv("ET_MON_LSBEATS_PORT");
	
	private String server = "http://nightly.elastest.io:37004/eim/api/agent/";	
	
	public RestTemplate restTemplate = new RestTemplate();
	public HttpHeaders headers = new HttpHeaders();
	
	static String agentId;
	
	// TODO - registerAgent_then200OK()
	@Test
	public void a_Test() throws InterruptedException, IOException {
		
		System.out.println("############ Running Test1: ############");
		
		String privateKey = "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAszuwmpLt7xzerUnYN7gEVeKJrq21JE3qIHo4Zo9ioGE2YzRj\ngchsZ2631ufws7vTwobGIercckE56ZMo2pst27GHcNTijQBk1+EWP++LipIFqQMr\n6HLCXE4oYskhkOZ1e3v1u79YdhMMrymVcf5eszp3r/8A4V7m5pBRrb7W29ZuvyYa\nQTfL9mqBVS2n3gqIbC4ff1i6bXp4jebkaBrTeSONvCR3rhlOrxFwgPqr1v5H1RBP\ntoJnzr6DEuDAInVRk54+z6NSpnU5s4knviF1j7BX+m5asbDKIxd5h8dCWnMQmc+n\nZuyFmBDZFHnRcG3WsPz10VW2d3olC4KWuCeP4QIDAQABAoIBAFcJ+591Dtr5uCGL\nJNcaI/DZTGdpr/frZnFTKSSVKR4dV14hyNjzzcEFAX35sOh3pERpUrqR5XAOwOLv\nNf3DMifoNI/UshgrQs2bX0S5PZiThPAovB/r6vsMcYxXhFdrs02+Sv1b1MeyRIyj\nsxFip/Z9xDXRrknD3nnFSAUKEik7TvlN2yCIVIsWk1OmUqezha+AZI9wbVUzJDUH\nBy5DUV7w3PXXFvxizLtCHkKjcBTGU5mE8zFrcaCGlAp/Jkp1L+AlBIJ7vgD7NTQg\niFO7AbOzrW1HMhvql4Nv8Mm4LXkRJN83axq/VnCVhPsiZcIjZVyzmN2mGpLqFOh4\nva12cskCgYEA3BIQCyzpXuQuUfB/+UctKubnswnUxBcLQfV4sfbGKAFTMGEcI2eP\njmSbkQykPL7uSJEM/YYxayIg0ppAmi78dG77sGVrLGlH/Qg9zvg0/qoX8G3gWAKK\n3257HwQ/QmsM8HG2PEdKmGB937aXPovWGEOw7ADtTMdluJ8pVeDh6W8CgYEA0H7P\n2YVfnWs0t5qnnVPHTFjXQjsT7ED4TKZmiaiacbIhD2wVuTJNQNROo67yXTP4kh0H\nUjOsa3gOeVzp0pKlU7J0efzjBtB2wVkOqUG0whFj80LWP4i93hvZNe8BAAmqMTTa\ntPa38Np+CB0bFPjSTmi4cHExwwupFt2XWYiWU68CgYEAgskpR7r1JjOtY3zuURL/\nwNNhN4HMNI0NX7GmfP0PXo8LBWFw+4l8Qz9/RICiyocdzXqGodSyYdzybLbHVdo+\npmOeqIJdYxNeeP4A3ZOcywwDFhv2i9dW+NoLya8YeTxtgCfUCZbEujH+HInC8KTi\nI6F274rNfCe0SDgutJ7lI3kCgYAkJxkbeskNnt1RSPvvh+tzDaSl02CtAscLY388\nN4QwWtboubE6n8JNj4LjVx6nkq9zhp0SX+tx5yt7V+UjolIQpU0VKgij0doFxM+K\nAd66GBHgyKIl+iwSK3oKpBrkSsi8J5IU9wMGPJzGA2YCyPKOrhHtTXN3grobQOlR\nmSGX+QKBgB4ewhNiDCLlIiGjKgxqaUlBu5fnutudBPkmkSbaY+bBRil3HnyN6rEH\n8YD2P/36mOsKwpFTyeLXcpoS7B/53Xphhn592lpHYQmel5S7gSCeko9BmR5t23bS\nB2ZGdJwKam9PB16XftnNG1d6jBdVTbKHhX0WgY5B5pT78r+JAMQg\n-----END RSA PRIVATE KEY-----";

		System.out.println("SUT Address: "+sut_address);
		//System.out.println("Private key: "+privateKey);
		
		JsonObject obj = new JsonObject();
		obj.addProperty("address", new String(sut_address));
		obj.addProperty("user", "root");
		obj.addProperty("private_key", new String(privateKey));
		obj.addProperty("logstash_ip", logstash_ip);
		obj.addProperty("logstash_port", logstash_port);
		obj.addProperty("password", "elastest");
		
		System.out.println("Payload: "+obj.toString());
		
		String URL = server;
		
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
		
		HttpEntity<String> request = new HttpEntity<String>(obj.toString(), headers);
		ResponseEntity<String> response = restTemplate.exchange(URL,  HttpMethod.POST, request, String.class);
		
		
		String body = response.getBody();
		JsonParser parser = new JsonParser();
		JsonObject json = (JsonObject) parser.parse(body);
		
		agentId = json.get("agentId").getAsString();
		
		
		System.out.println("############ Response for Test1: ############");
		System.out.println(response);
		
		Assertions.assertEquals(200, response.getStatusCode().value());

		
	}

	 @Test
	 public void b_Test() throws InterruptedException {
		System.out.println("############ Running Test2: ############");
		
		String uri_packetloss_action = "controllability/"+agentId+"/packetloss";
		String URL = server + uri_packetloss_action;
		
		
		JsonObject obj = new JsonObject();
		obj.addProperty("exec", "EXECBEAT");
		obj.addProperty("component", "EIM");
		obj.addProperty("packetLoss", "0.01");
		obj.addProperty("stressNg", "");
		obj.addProperty("dockerized", "yes");
		obj.addProperty("cronExpression", "@every 60s");
		
		System.out.println("Payload: "+obj.toString());
		
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
		
		
		HttpEntity<String> request = new HttpEntity<String>(
				obj.toString(), headers);
		
		ResponseEntity<String> response = restTemplate.exchange(URL,  HttpMethod.POST, request, String.class);
		System.out.println("############ Response for Test2: ############");
		System.out.println(response);

		Assertions.assertEquals(200, response.getStatusCode().value());
	  
	 }
	 
	 @Test
	 public void c_Test() throws InterruptedException {
		System.out.println("############ Running Test3: ############");
		
		String uri_packetloss_action = "controllability/"+agentId+"/stress";
		String URL = server + uri_packetloss_action;
		 
		JsonObject obj = new JsonObject();
		obj.addProperty("exec", "EXECBEAT");
		obj.addProperty("component", "EIM");
		obj.addProperty("packetLoss", "");
		obj.addProperty("stressNg", "1");
		obj.addProperty("dockerized", "yes");
		obj.addProperty("cronExpression", "@every 60s");
		
		System.out.println("Payload: "+obj.toString());
		
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

		HttpEntity<String> request = new HttpEntity<String>(
				obj.toString(), headers);
		
		TimeUnit.SECONDS.sleep(600);
		
		ResponseEntity<String> response = restTemplate.exchange(URL,  HttpMethod.POST, request, String.class);
		System.out.println("############ Response for Test3: ############");
		System.out.println(response);
		
		Assertions.assertEquals(200, response.getStatusCode().value());
	  
	 }
	
	 @Test
	 public void d_Test() throws InterruptedException {
		System.out.println("############ Running Test4: ############");

		String uri_unistall_agent = agentId+"/unmonitor"; 

		 
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
		 
		String URL = server +  uri_unistall_agent;

		HttpEntity<String> request = new HttpEntity<String>("", headers);
		TimeUnit.SECONDS.sleep(500);

		ResponseEntity<String> response = restTemplate.exchange(URL,  HttpMethod.DELETE, request, String.class);
		
		System.out.println("############ Response for Test4: ############");
		System.out.println(response);
		
		Assertions.assertEquals(200, response.getStatusCode().value());
 
	 }
	 
	 @Test
	 public void e_Test() throws InterruptedException {
		 
		 System.out.println("############ Running Test5: ############");

		 headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
		 
		 String URL = server+agentId;
		 		 
		 HttpEntity<String> request = new HttpEntity<String>("", headers);
		 TimeUnit.SECONDS.sleep(500);

		 ResponseEntity<String> response = restTemplate.exchange(URL,  HttpMethod.DELETE, request, String.class);
		 
		 System.out.println("############ Response for Test5: ############");
		 System.out.println(response);
		 
         Assertions.assertEquals(200, response.getStatusCode().value());
         
         agentId = "";
         
	 }

}
