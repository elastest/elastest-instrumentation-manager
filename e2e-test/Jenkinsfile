@Library('ciElastestConnect') _

elastest_lib.setVersion('dev')
//initialization of the context for the library
elastest_lib.setContext(this)

//initialization of the runnable object to access elastest methods inside the pipeline
def elastest= elastest_lib.getElastestMethods()

elastest_lib.setMode('experimental-lite')
//definition of nodes is managed by the library. Just declare the steps of your pipeline
//inside the elastest_lib.pipeline({...})

elastest_lib.pipeline({
    
    stage ('docker container')
        def elastestContainer = elastest.ctx.docker.image('elastest/ci-docker-e2e:latest')
        elastestContainer.pull()
        elastesetContainer.inside("-u jenkins -v /var/run/docker.sock:/var/run/docker.sock:rw -v /dev/shm:/dev/shm")  {
            sh '/usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf &'

            def sutContainer = elastest.ctx.docker.image('elastest/eim-sut')
            def privateKey = ""
            def ipAddr = ""
            sutContainer.pull()
            sutContainer.inside("-u root --name=sut-dockerized -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/containers/:/var/lib/docker/containers/") {

                privateKey = sh returnStdout: true, script: 'cat /root/.ssh/id_rsa'
                //sh "echo $privateKey"
                ipAddr = sh returnStdout: true, script: 'hostname -I'
                //sh "echo $ipAddr"
            }
          
            stage ('prepare')
                git 'https://github.com/elastest/elastest-instrumentation-manager.git'
                elastest.connect2ElastestNetwork()
                def elastestURL = elastest.getEtmUrl()
                
            stage ("E2E tests")
                try {
                     sh "cd e2e-test; bash ./start-instance.sh "+elastestURL+" "+privateKey+" "+ipAddr
                     sh "echo Initial Test successful;"
                } catch(e) {
                    sh '''\
                       docker ps --all
                       docker ps --filter name=eus -q
                       docker ps --filter name=eus -q | xargs -L 1 docker logs || true
                       docker ps --filter name=eus -q | xargs -L 1 docker inspect || true
                    ''' 
                } finally {
                    //step([$class: 'JUnitResultArchiver', testDataPublishers: [[$class: 'AttachmentPublisher']], testResults: '**/target/surefire-reports/TEST-*.xml'])
                }   
        }
  })