@Library('ciElastestConnect') _

elastest_lib.setVersion('dev')
//initialization of the context for the library
elastest_lib.setContext(this)

//initialization of the runnable object to access elastest methods inside the pipeline
def elastest= elastest_lib.getElastestMethods()

elastest_lib.setMode('experimental-lite')
//definition of nodes is managed by the library. Just declare the steps of your pipeline
//inside the elastest_lib.pipeline({...})

elastest_lib.pipeline({

    stage ('docker container')
        def elastestContainer = elastest.ctx.docker.image('elastest/ci-docker-e2e:latest')
        elastestContainer.pull()
        elastestContainer.inside("-u jenkins -v /var/run/docker.sock:/var/run/docker.sock:rw -v /dev/shm:/dev/shm")  {
            sh '/usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf &'

            def sutContainer = elastest.ctx.docker.image('elastest/eim-sut')

            stage ('prepare')

                git 'https://github.com/elastest/elastest-instrumentation-manager.git'
                elastest.connect2ElastestNetwork()
                def elastestURL = elastest.getEtmUrl()

                def privateKey = ""
                def ipAddr = ""
                sutContainer.pull()
                sutContainer.inside("-u root --name=sut-dockerized -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/containers/:/var/lib/docker/containers/") {

                    //sh 'cp /root/.ssh/id_rsa .; sed -i "\$ d" id_rsa; sed -i "1d" id_rsa'
                    //privateKey = sh returnStdout: true, script: 'tr -d "\n" < id_rsa'
                    sh "cat /root/.ssh/id_rsa"
                    sh "touch id_rsa"
                    sh "awk '{printf \"%s\\\\\\\\n\", \$0}' /root/.ssh/id_rsa > id_rsa"
                    sh "sed -i -e '\$ s|.\$||' -e '\$ s|.\$||' id_rsa"
                    privateKey = readFile 'id_rsa'
                    ipAddr = sh returnStdout: true, script: 'hostname -I'
                    sh "echo $ipAddr"
                }

            stage ("E2E tests")
                try {
                     sh "pwd"
                     sh "cd e2e-test; bash ./create-sut-tjob.sh "+elastestURL+" "+privateKey+" "+ipAddr
                     //def projId = sh returnStdout: true, script: "cat $sutResult | grep 'SuT ID' | cut -d ':' -f 2 | grep -wo [0-9]*"
                     //def sutId = sh returnStdout: true, script: "cat $sutResult | grep 'Proj ID' | cut -d ':' -f 2 | grep -wo [0-9]*"
                     //sh "echo Initial Test successful;"

                    sleep(180)

                    sh "pwd"
                    def projID = sh returnStdout: true, script: 'cat e2e-test/projid_file'
                    sh "bash ./check-beat-status.sh "+elastestURL+" "+projID

                    sh "echo TEST_SUCCESSFULL"
//
//
//                    def isFileBeatDown = true
//                    def isMetricBeatDown = true
//                    def isPacketBeatDown = true
//                    def result = false
//
//                    sutContainer.inside {
//
//                        def ipad = sh returnStdout: true, script: 'hostname -I'
//                        sh "echo $ipad"
//
//                        sh 'service filebeat status'
//                        result = sh returnStdout: true, script: 'echo $?'
//                        isFileBeatDown = result != 0
//
//                        sh 'service metricbeat status'
//                        result = sh returnStdout: true, script: 'echo $?'
//                        isMetricBeatDown = result != 0
//
//                        sh 'service packetbeat status'
//                        result = sh returnStdout: true, script: 'echo $?'
//                        isPacketBeatDown = result != 0
//                    }
//
//                    if (isPacketBeatDown || isMetricBeatDown || isFileBeatDown) {
//                        throw new Exception("BEATS INITIALIZATION FAILURE")
//                    }


                } catch(e) {
                    sh '''\
                       docker ps --all
                       docker ps --filter name=eus -q
                       docker ps --filter name=eus -q | xargs -L 1 docker logs || true
                       docker ps --filter name=eus -q | xargs -L 1 docker inspect || true
                    '''
                } finally {
                    //step([$class: 'JUnitResultArchiver', testDataPublishers: [[$class: 'AttachmentPublisher']], testResults: '**/target/surefire-reports/TEST-*.xml'])
                }
        }
  })